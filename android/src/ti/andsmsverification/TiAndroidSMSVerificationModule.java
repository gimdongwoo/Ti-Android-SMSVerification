/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.andsmsverification;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.provider.Settings;
import android.telephony.TelephonyManager;

@Kroll.module(name="TiAndroidSMSVerification", id="ti.andsmsverification")
public class TiAndroidSMSVerificationModule extends KrollModule
{
	// Module instance
    private static TiAndroidSMSVerificationModule module;

	// Standard Debugging variables
	private static final String LCAT = "TiAndroidSMSVerificationModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiAndroidSMSVerificationModule()
	{
		super();
		module = this;
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}
	
	/* Get an instance of that module*/
    public static TiAndroidSMSVerificationModule getInstance() {
        return module;
    }

	// Methods
	@Kroll.method
	public String getMobileNumber()
	{
		if (!hasPhonePermission()) {
			return "";
		}
		
		Context context = TiApplication.getInstance().getApplicationContext();
		TelephonyManager tMgr = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
		String mPhoneNumber = tMgr.getLine1Number();
		Log.d(LCAT, "getMobileNumber : " + mPhoneNumber);
		return mPhoneNumber;
	}
	
	// Methods
	@Kroll.method
	private boolean hasPhonePermission() {
	    if (Build.VERSION.SDK_INT < 23) {
	        return true;
	    }
	    Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
	    if (currentActivity.checkSelfPermission(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED) {
	        return true;
	    } 
	    return false;
	}
	
	@Kroll.method
	private boolean hasSMSPermission() {
	    if (Build.VERSION.SDK_INT < 23) {
	        return true;
	    }
	    Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
	    if (currentActivity.checkSelfPermission(Manifest.permission.RECEIVE_SMS) == PackageManager.PERMISSION_GRANTED) {
	        return true;
	    } 
	    return false;
	}
	
	@Kroll.method
	public void requestPhonePermissions(@Kroll.argument(optional=true)KrollFunction permissionCallback)
	{
		if (hasPhonePermission() && hasSMSPermission()) {
			return;
		}
		
		String[] permissions = null;
		if (!hasPhonePermission() && !hasSMSPermission()) {
		    permissions = new String[] {Manifest.permission.READ_PHONE_STATE, Manifest.permission.RECEIVE_SMS};
		} else if (!hasPhonePermission()) {
		    permissions = new String[] {Manifest.permission.READ_PHONE_STATE};
		} else {
	        permissions = new String[] {Manifest.permission.RECEIVE_SMS};
		}

		if (TiBaseActivity.contactsCallbackContext == null) {
			TiBaseActivity.contactsCallbackContext = getKrollObject();
		}
		TiBaseActivity.contactsPermissionCallback = permissionCallback;

		Activity currentActivity  = TiApplication.getInstance().getCurrentActivity();
		currentActivity.requestPermissions(permissions, TiC.PERMISSION_CODE_CONTACTS);
	}
	
	@Kroll.method
	private void settingsOpen() {
	    if (Build.VERSION.SDK_INT < 23) {
	        return;
	    }
	    Context context = TiApplication.getInstance().getApplicationContext();
	    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, Uri.fromParts("package", context.getPackageName(), null));
    	intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//	    	context.startActivity(intent);
    	Activity activity = TiApplication.getAppRootOrCurrentActivity();
    	activity.startActivity(intent);
    	return;
	}

//	// Properties
//	@Kroll.getProperty
//	public String getExampleProp()
//	{
//		Log.d(LCAT, "get example property");
//		return "hello world";
//	}
//
//
//	@Kroll.setProperty
//	public void setExampleProp(String value) {
//		Log.d(LCAT, "set example property: " + value);
//	}

}

